# -*- coding: utf-8 -*-
"""keras-multiclass-person-or-not.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KwgVhErNu5UIQbkWl5VsFKm65-dP156k
"""

from google.colab import drive
drive.mount('/content/gdrive')
#4/JAGoTmJNBixrTrCZcDaa6hdqSwDZJBXTmXnzm1mVXgkjb6wDvWBu6l4

import os

os.listdir('/content/gdrive/My Drive/Datasets/person or not/')

'''file_location = '/content/gdrive/My Drive/Datasets/person or not/dataset.zip'

!unzip file_location'''
#incase if it doesnt work use zip extractor extension from google drive

path_train = "/content/gdrive/My Drive/Datasets/person or not/dataset/train/"
path_test = "/content/gdrive/My Drive/Datasets/person or not/dataset/test/"
path_prediction="/content/gdrive/My Drive/Datasets/person or not/dataset/prediction"

from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense

#conv layers
model = Sequential()
model.add(Conv2D(128, (3, 3), input_shape=(150,150,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

#fully connected layers
model.add(Flatten())  
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(2))
model.add(Activation('softmax'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

batch_size = 16

train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        path_train,
        target_size=(150, 150),
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
        path_test,
        target_size=(150, 150),
        batch_size=16,
        class_mode='categorical')

nb_train_samples =828
nb_validation_samples = 60
model.fit_generator(train_generator,
                    steps_per_epoch=827,
                    epochs=2,
                    validation_data=validation_generator,
                    validation_steps=60)

labels=["Person","Not Person"]
import cv2
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

#Prediction

## prediction of single new data
import numpy as np
from keras.preprocessing import image
test_image= image.load_img(path_prediction+'/2.jpg'
                           ,target_size =(150,150))

test_image

## Convert image to array
test_image = image.img_to_array(test_image)

## For single prediction change the dimension using axis. To remove problem of batch
test_image = np.expand_dims(test_image,axis = 0)
result = model.predict(test_image)

np.around(result)

for i in range(len(result[0])):
    print (labels[i],'-> ',result[0][i])

